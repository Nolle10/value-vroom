/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type LoginTokenPostError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type LoginTokenPostVariables = ApiContext['fetcherOptions']

/**
 * Login for access token
 */
export const fetchLoginTokenPost = (variables: LoginTokenPostVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Token, LoginTokenPostError, undefined, {}, {}, {}>({
    url: '/token',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Login for access token
 */
export const useLoginTokenPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Token, LoginTokenPostError, LoginTokenPostVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.Token, LoginTokenPostError, LoginTokenPostVariables>({
    mutationFn: (variables: LoginTokenPostVariables) => fetchLoginTokenPost({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SignupSignupPostError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type SignupSignupPostVariables = ApiContext['fetcherOptions']

/**
 * Signup for access token
 */
export const fetchSignupSignupPost = (variables: SignupSignupPostVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Token, SignupSignupPostError, undefined, {}, {}, {}>({
    url: '/signup',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Signup for access token
 */
export const useSignupSignupPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Token, SignupSignupPostError, SignupSignupPostVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.Token, SignupSignupPostError, SignupSignupPostVariables>({
    mutationFn: (variables: SignupSignupPostVariables) => fetchSignupSignupPost({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CurrentUserCurrentUserGetError = Fetcher.ErrorWrapper<undefined>

export type CurrentUserCurrentUserGetVariables = ApiContext['fetcherOptions']

/**
 * Get the current user
 */
export const fetchCurrentUserCurrentUserGet = (variables: CurrentUserCurrentUserGetVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.User, CurrentUserCurrentUserGetError, undefined, {}, {}, {}>({
    url: '/current_user',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get the current user
 */
export const useCurrentUserCurrentUserGet = <TData = Schemas.User>(
  variables: CurrentUserCurrentUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, CurrentUserCurrentUserGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.User, CurrentUserCurrentUserGetError, TData>({
    queryKey: queryKeyFn({ path: '/current_user', operationId: 'currentUserCurrentUserGet', variables }),
    queryFn: ({ signal }) => fetchCurrentUserCurrentUserGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetUsersError = Fetcher.ErrorWrapper<undefined>

export type GetUsersResponse = Schemas.User[]

export type GetUsersVariables = ApiContext['fetcherOptions']

/**
 * Get all users
 */
export const fetchGetUsers = (variables: GetUsersVariables, signal?: AbortSignal) =>
  apiFetch<GetUsersResponse, GetUsersError, undefined, {}, {}, {}>({
    url: '/users',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all users
 */
export const useGetUsers = <TData = GetUsersResponse>(
  variables: GetUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetUsersResponse, GetUsersError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetUsersResponse, GetUsersError, TData>({
    queryKey: queryKeyFn({ path: '/users', operationId: 'getUsers', variables }),
    queryFn: ({ signal }) => fetchGetUsers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetAllCarsError = Fetcher.ErrorWrapper<undefined>

export type GetAllCarsResponse = Schemas.Car[]

export type GetAllCarsVariables = ApiContext['fetcherOptions']

/**
 * Get all cars
 */
export const fetchGetAllCars = (variables: GetAllCarsVariables, signal?: AbortSignal) =>
  apiFetch<GetAllCarsResponse, GetAllCarsError, undefined, {}, {}, {}>({
    url: '/cars/all',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all cars
 */
export const useGetAllCars = <TData = GetAllCarsResponse>(
  variables: GetAllCarsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetAllCarsResponse, GetAllCarsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetAllCarsResponse, GetAllCarsError, TData>({
    queryKey: queryKeyFn({ path: '/cars/all', operationId: 'getAllCars', variables }),
    queryFn: ({ signal }) => fetchGetAllCars({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetBookedCarsError = Fetcher.ErrorWrapper<undefined>

export type GetBookedCarsResponse = Schemas.Car[]

export type GetBookedCarsVariables = ApiContext['fetcherOptions']

/**
 * Get all booked cars
 */
export const fetchGetBookedCars = (variables: GetBookedCarsVariables, signal?: AbortSignal) =>
  apiFetch<GetBookedCarsResponse, GetBookedCarsError, undefined, {}, {}, {}>({
    url: '/cars/booked',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all booked cars
 */
export const useGetBookedCars = <TData = GetBookedCarsResponse>(
  variables: GetBookedCarsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetBookedCarsResponse, GetBookedCarsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetBookedCarsResponse, GetBookedCarsError, TData>({
    queryKey: queryKeyFn({ path: '/cars/booked', operationId: 'getBookedCars', variables }),
    queryFn: ({ signal }) => fetchGetBookedCars({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetAvailableCarsError = Fetcher.ErrorWrapper<undefined>

export type GetAvailableCarsResponse = Schemas.Car[]

export type GetAvailableCarsVariables = ApiContext['fetcherOptions']

/**
 * Get all available cars
 */
export const fetchGetAvailableCars = (variables: GetAvailableCarsVariables, signal?: AbortSignal) =>
  apiFetch<GetAvailableCarsResponse, GetAvailableCarsError, undefined, {}, {}, {}>({
    url: '/cars/available',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all available cars
 */
export const useGetAvailableCars = <TData = GetAvailableCarsResponse>(
  variables: GetAvailableCarsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetAvailableCarsResponse, GetAvailableCarsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetAvailableCarsResponse, GetAvailableCarsError, TData>({
    queryKey: queryKeyFn({ path: '/cars/available', operationId: 'getAvailableCars', variables }),
    queryFn: ({ signal }) => fetchGetAvailableCars({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetCarBookingsPathParams = {
  carId: number
}

export type GetCarBookingsError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type GetCarBookingsResponse = Schemas.Booking[]

export type GetCarBookingsVariables = {
  pathParams: GetCarBookingsPathParams
} & ApiContext['fetcherOptions']

/**
 * Get all bookings for a specific car
 */
export const fetchGetCarBookings = (variables: GetCarBookingsVariables, signal?: AbortSignal) =>
  apiFetch<GetCarBookingsResponse, GetCarBookingsError, undefined, {}, {}, GetCarBookingsPathParams>({
    url: '/cars/{carId}/bookings',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all bookings for a specific car
 */
export const useGetCarBookings = <TData = GetCarBookingsResponse>(
  variables: GetCarBookingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetCarBookingsResponse, GetCarBookingsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetCarBookingsResponse, GetCarBookingsError, TData>({
    queryKey: queryKeyFn({ path: '/cars/{car_id}/bookings', operationId: 'getCarBookings', variables }),
    queryFn: ({ signal }) => fetchGetCarBookings({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetImagesImagesGetError = Fetcher.ErrorWrapper<undefined>

export type GetImagesImagesGetResponse = Schemas.Image[]

export type GetImagesImagesGetVariables = ApiContext['fetcherOptions']

/**
 * Get all images
 */
export const fetchGetImagesImagesGet = (variables: GetImagesImagesGetVariables, signal?: AbortSignal) =>
  apiFetch<GetImagesImagesGetResponse, GetImagesImagesGetError, undefined, {}, {}, {}>({
    url: '/images',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all images
 */
export const useGetImagesImagesGet = <TData = GetImagesImagesGetResponse>(
  variables: GetImagesImagesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetImagesImagesGetResponse, GetImagesImagesGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetImagesImagesGetResponse, GetImagesImagesGetError, TData>({
    queryKey: queryKeyFn({ path: '/images', operationId: 'getImagesImagesGet', variables }),
    queryFn: ({ signal }) => fetchGetImagesImagesGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetImageImagesImageNameGetPathParams = {
  imageName: string
}

export type GetImageImagesImageNameGetError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type GetImageImagesImageNameGetVariables = {
  pathParams: GetImageImagesImageNameGetPathParams
} & ApiContext['fetcherOptions']

/**
 * Get specific image
 */
export const fetchGetImageImagesImageNameGet = (variables: GetImageImagesImageNameGetVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetImageImagesImageNameGetError, undefined, {}, {}, GetImageImagesImageNameGetPathParams>({
    url: '/images/{imageName}',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get specific image
 */
export const useGetImageImagesImageNameGet = <TData = undefined>(
  variables: GetImageImagesImageNameGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetImageImagesImageNameGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, GetImageImagesImageNameGetError, TData>({
    queryKey: queryKeyFn({ path: '/images/{image_name}', operationId: 'getImageImagesImageNameGet', variables }),
    queryFn: ({ signal }) => fetchGetImageImagesImageNameGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetBookingsBookingsGetError = Fetcher.ErrorWrapper<undefined>

export type GetBookingsBookingsGetResponse = Schemas.Booking[]

export type GetBookingsBookingsGetVariables = ApiContext['fetcherOptions']

/**
 * Get all bookings
 */
export const fetchGetBookingsBookingsGet = (variables: GetBookingsBookingsGetVariables, signal?: AbortSignal) =>
  apiFetch<GetBookingsBookingsGetResponse, GetBookingsBookingsGetError, undefined, {}, {}, {}>({
    url: '/bookings',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all bookings
 */
export const useGetBookingsBookingsGet = <TData = GetBookingsBookingsGetResponse>(
  variables: GetBookingsBookingsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetBookingsBookingsGetResponse, GetBookingsBookingsGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetBookingsBookingsGetResponse, GetBookingsBookingsGetError, TData>({
    queryKey: queryKeyFn({ path: '/bookings', operationId: 'getBookingsBookingsGet', variables }),
    queryFn: ({ signal }) => fetchGetBookingsBookingsGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CreateBookingBookingsPostError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type CreateBookingBookingsPostVariables = ApiContext['fetcherOptions']

/**
 * Create a booking
 */
export const fetchCreateBookingBookingsPost = (variables: CreateBookingBookingsPostVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Booking, CreateBookingBookingsPostError, undefined, {}, {}, {}>({
    url: '/bookings',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Create a booking
 */
export const useCreateBookingBookingsPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Booking, CreateBookingBookingsPostError, CreateBookingBookingsPostVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.Booking, CreateBookingBookingsPostError, CreateBookingBookingsPostVariables>({
    mutationFn: (variables: CreateBookingBookingsPostVariables) =>
      fetchCreateBookingBookingsPost({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type QueryOperation =
  | {
      path: '/current_user'
      operationId: 'currentUserCurrentUserGet'
      variables: CurrentUserCurrentUserGetVariables
    }
  | {
      path: '/users'
      operationId: 'getUsers'
      variables: GetUsersVariables
    }
  | {
      path: '/cars/all'
      operationId: 'getAllCars'
      variables: GetAllCarsVariables
    }
  | {
      path: '/cars/booked'
      operationId: 'getBookedCars'
      variables: GetBookedCarsVariables
    }
  | {
      path: '/cars/available'
      operationId: 'getAvailableCars'
      variables: GetAvailableCarsVariables
    }
  | {
      path: '/cars/{car_id}/bookings'
      operationId: 'getCarBookings'
      variables: GetCarBookingsVariables
    }
  | {
      path: '/images'
      operationId: 'getImagesImagesGet'
      variables: GetImagesImagesGetVariables
    }
  | {
      path: '/images/{image_name}'
      operationId: 'getImageImagesImageNameGet'
      variables: GetImageImagesImageNameGetVariables
    }
  | {
      path: '/bookings'
      operationId: 'getBookingsBookingsGet'
      variables: GetBookingsBookingsGetVariables
    }
