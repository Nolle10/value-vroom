/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type LoginTokenPostError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type LoginTokenPostVariables = ApiContext['fetcherOptions']

/**
 * Login for access token
 */
export const fetchLoginTokenPost = (variables: LoginTokenPostVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Token, LoginTokenPostError, undefined, {}, {}, {}>({
    url: '/token',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Login for access token
 */
export const useLoginTokenPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Token, LoginTokenPostError, LoginTokenPostVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.Token, LoginTokenPostError, LoginTokenPostVariables>({
    mutationFn: (variables: LoginTokenPostVariables) => fetchLoginTokenPost({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SignupSignupPostError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type SignupSignupPostVariables = ApiContext['fetcherOptions']

/**
 * Signup for access token
 */
export const fetchSignupSignupPost = (variables: SignupSignupPostVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Token, SignupSignupPostError, undefined, {}, {}, {}>({
    url: '/signup',
    method: 'post',
    ...variables,
    signal,
  })

/**
 * Signup for access token
 */
export const useSignupSignupPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Token, SignupSignupPostError, SignupSignupPostVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.Token, SignupSignupPostError, SignupSignupPostVariables>({
    mutationFn: (variables: SignupSignupPostVariables) => fetchSignupSignupPost({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CurrentUserCurrentUserGetError = Fetcher.ErrorWrapper<undefined>

export type CurrentUserCurrentUserGetVariables = ApiContext['fetcherOptions']

/**
 * Get the current user
 */
export const fetchCurrentUserCurrentUserGet = (variables: CurrentUserCurrentUserGetVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.User, CurrentUserCurrentUserGetError, undefined, {}, {}, {}>({
    url: '/current_user',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get the current user
 */
export const useCurrentUserCurrentUserGet = <TData = Schemas.User>(
  variables: CurrentUserCurrentUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, CurrentUserCurrentUserGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.User, CurrentUserCurrentUserGetError, TData>({
    queryKey: queryKeyFn({ path: '/current_user', operationId: 'currentUserCurrentUserGet', variables }),
    queryFn: ({ signal }) => fetchCurrentUserCurrentUserGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetUsersError = Fetcher.ErrorWrapper<undefined>

export type GetUsersResponse = Schemas.User[]

export type GetUsersVariables = ApiContext['fetcherOptions']

/**
 * Get all users
 */
export const fetchGetUsers = (variables: GetUsersVariables, signal?: AbortSignal) =>
  apiFetch<GetUsersResponse, GetUsersError, undefined, {}, {}, {}>({
    url: '/users',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all users
 */
export const useGetUsers = <TData = GetUsersResponse>(
  variables: GetUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetUsersResponse, GetUsersError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetUsersResponse, GetUsersError, TData>({
    queryKey: queryKeyFn({ path: '/users', operationId: 'getUsers', variables }),
    queryFn: ({ signal }) => fetchGetUsers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetCarsCarsGetError = Fetcher.ErrorWrapper<undefined>

export type GetCarsCarsGetResponse = Schemas.Car[]

export type GetCarsCarsGetVariables = ApiContext['fetcherOptions']

/**
 * Get all cars
 */
export const fetchGetCarsCarsGet = (variables: GetCarsCarsGetVariables, signal?: AbortSignal) =>
  apiFetch<GetCarsCarsGetResponse, GetCarsCarsGetError, undefined, {}, {}, {}>({
    url: '/cars',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all cars
 */
export const useGetCarsCarsGet = <TData = GetCarsCarsGetResponse>(
  variables: GetCarsCarsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetCarsCarsGetResponse, GetCarsCarsGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetCarsCarsGetResponse, GetCarsCarsGetError, TData>({
    queryKey: queryKeyFn({ path: '/cars', operationId: 'getCarsCarsGet', variables }),
    queryFn: ({ signal }) => fetchGetCarsCarsGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetImagesImagesGetError = Fetcher.ErrorWrapper<undefined>

export type GetImagesImagesGetResponse = Schemas.Image[]

export type GetImagesImagesGetVariables = ApiContext['fetcherOptions']

/**
 * Get all images
 */
export const fetchGetImagesImagesGet = (variables: GetImagesImagesGetVariables, signal?: AbortSignal) =>
  apiFetch<GetImagesImagesGetResponse, GetImagesImagesGetError, undefined, {}, {}, {}>({
    url: '/images',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get all images
 */
export const useGetImagesImagesGet = <TData = GetImagesImagesGetResponse>(
  variables: GetImagesImagesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetImagesImagesGetResponse, GetImagesImagesGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<GetImagesImagesGetResponse, GetImagesImagesGetError, TData>({
    queryKey: queryKeyFn({ path: '/images', operationId: 'getImagesImagesGet', variables }),
    queryFn: ({ signal }) => fetchGetImagesImagesGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GetImageImagesImageNameGetPathParams = {
  imageName: string
}

export type GetImageImagesImageNameGetError = Fetcher.ErrorWrapper<{
  status: 422
  payload: Schemas.HTTPValidationError
}>

export type GetImageImagesImageNameGetVariables = {
  pathParams: GetImageImagesImageNameGetPathParams
} & ApiContext['fetcherOptions']

/**
 * Get specific image
 */
export const fetchGetImageImagesImageNameGet = (variables: GetImageImagesImageNameGetVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetImageImagesImageNameGetError, undefined, {}, {}, GetImageImagesImageNameGetPathParams>({
    url: '/images/{imageName}',
    method: 'get',
    ...variables,
    signal,
  })

/**
 * Get specific image
 */
export const useGetImageImagesImageNameGet = <TData = undefined>(
  variables: GetImageImagesImageNameGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetImageImagesImageNameGetError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, GetImageImagesImageNameGetError, TData>({
    queryKey: queryKeyFn({ path: '/images/{image_name}', operationId: 'getImageImagesImageNameGet', variables }),
    queryFn: ({ signal }) => fetchGetImageImagesImageNameGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type QueryOperation =
  | {
      path: '/current_user'
      operationId: 'currentUserCurrentUserGet'
      variables: CurrentUserCurrentUserGetVariables
    }
  | {
      path: '/users'
      operationId: 'getUsers'
      variables: GetUsersVariables
    }
  | {
      path: '/cars'
      operationId: 'getCarsCarsGet'
      variables: GetCarsCarsGetVariables
    }
  | {
      path: '/images'
      operationId: 'getImagesImagesGet'
      variables: GetImagesImagesGetVariables
    }
  | {
      path: '/images/{image_name}'
      operationId: 'getImageImagesImageNameGet'
      variables: GetImageImagesImageNameGetVariables
    }
